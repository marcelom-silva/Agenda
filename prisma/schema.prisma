// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Campo adicionado para autenticação por email/senha
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  financialEntries FinancialEntry[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id                            String    @id @default(cuid())
  userId                        String
  title                         String
  description                   String?
  status                        String    @default("todo") // "todo", "doing", "done"
  dueDate                       DateTime? // Data de vencimento
  colorTag                      String?   // Cor da tag (hexadecimal)
  isRecurring                   Boolean   @default(false)
  recurrenceRule                String?   // Ex: "RRULE:FREQ=WEEKLY;BYDAY=MO;INTERVAL=1" ou JSON
  originalDueDateForRecurrence  DateTime? // Para ajudar a gerar próximas ocorrências
  lastInstanceGeneratedAt       DateTime? // Para controlar a geração de tarefas recorrentes
  order                         Int?      // Para ordenação no Kanban
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime  @updatedAt
  user                          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FinancialEntry {
  id              String    @id @default(cuid())
  userId          String
  description     String
  amount          Float     // Alterado de Decimal para Float, pois SQLite não suporta Decimal
  type            String    // "expense", "income"
  category        String
  dueDate         DateTime  // Data de vencimento/ocorrência
  isRecurring     Boolean   @default(false)
  recurrenceRule  String?   // Ex: "RRULE:FREQ=MONTHLY;BYMONTHDAY=10" ou JSON
  paid            Boolean   @default(false) // Se a despesa foi paga ou receita recebida
  paidDate        DateTime? // Data do pagamento/recebimento
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
